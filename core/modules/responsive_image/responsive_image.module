<?php

/**
 * @file
 * Responsive image display formatter for image fields.
 */

use Drupal\responsive_image\Entity\ResponsiveImageMapping;
use \Drupal\Core\Template\Attribute;
use Symfony\Component\HttpFoundation\Request;

/**
 * Implements hook_help().
 */
function responsive_image_help($route_name, Request $request) {
  $output = '';
  switch ($route_name) {
    case 'help.page.responsive_image':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Responsive Image module provides an image formatter and breakpoint mappings to output responsive images using the HTML5 picture tag. For more information, see the <a href="!responsive_image">online documentation for the Responsive Image module</a>.', array( '!responsive_image' => 'https://drupal.org/documentation/modules/responsive_image')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Defining responsive image mappings') . '</dt>';
      $output .= '<dd>' . t('By creating responsive image mappings you define the image styles that are being used to output images at certain breakpoints. On the <a href="!responsive_image_mapping">Responsive image mappings</a> page, click <em>Add responsive image mapping</em> to create a new mapping. First chose a label and a breakpoint group and click Save. After that you can choose the image styles that will be used for each breakpoint. Image styles can be defined on the <a href="!image_styles">Image styles page</a> that is provided by the <a href="!image_help">Image module</a>. Breakpoints are defined in the configuration files of the theme. See the <a href="!breakpoint_help">help page of the Breakpoint module</a> for more information.', array('!responsive_image_mapping' => \Drupal::url('responsive_image.mapping_page'), '!image_styles' => \Drupal::url('image.style_list'),'!image_help' => \Drupal::url('help.page', array('name' => 'image')), '!breakpoint_help' => \Drupal::url('help.page', array('name' => 'breakpoint')))) . '</dd>';
      $output .= '<dt>' . t('Using responsive image mappings in Image fields') . '</dt>';
      $output .= '<dd>' . t('After defining responsive image mappings, you can use them in the display settings for your Image fields, so that the site displays responsive images using the HTML5 picture tag. Open the Manage display page for the entity type (content type, taxonomy vocabulary, etc.) that the Image field is attached to. Choose the format <em>Responsive image</em>, click the Edit icon, and select one of the responsive image mappings that you have created. For general information on how to manage fields and their display see the <a href="!field_ui">help page of the Field UI module</a>. For information about entities see the <a href="!entity_help">help page of the Entity module</a>.', array('!field_ui' => \Drupal::url('help.page', array('name' => 'field_ui')),'!entity_help' => \Drupal::url('help.page', array('name' => 'entity')))) . '</dd>';
      $output .= '</dl>';
      break;

    case 'responsive_image.mapping_page':
      $output .= '<p>' . t('A responsive image mapping associates an image style with each breakpoint defined by your theme.') . '</p>';
      break;

  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function responsive_image_permission() {
  return array(
    'administer responsive images' => array(
      'title' => t('Administer responsive images'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function responsive_image_menu() {
  $items = array();

  $items['admin/config/media/responsive-image-mapping'] = array(
    'title' => 'Responsive image mappings',
    'description' => 'Manage responsive image mappings',
    'weight' => 10,
    'route_name' => 'responsive_image.mapping_page',
  );
  $items['admin/config/media/responsive-image-mapping/%responsive_image_mapping'] = array(
    'title' => 'Edit responsive image mapping',
    'route_name' => 'responsive_image.mapping_page_edit',
  );
  $items['admin/config/media/responsive-image-mapping/%responsive_image_mapping/duplicate'] = array(
    'title' => 'Duplicate responsive image mapping',
    'route_name' => 'responsive_image.mapping_page_duplicate',
  );

  return $items;
}

/**
 * Load one responsive image by its identifier.
 *
 * @param int $id
 *   The id of the responsive image mapping to load.
 *
 * @return \Drupal\responsive_image\ResponsiveImageMappingInterface
 *   The entity object, or NULL if there is no entity with the given id.
 *
 * @todo Needed for menu_callback
 *
 * @see http://drupal.org/node/1798214
 *
 */
function responsive_image_mapping_load($id) {
  return entity_load('responsive_image_mapping', $id);
}

/**
 * Implements hook_theme().
 */
function responsive_image_theme() {
  return array(
    'responsive_image' => array(
      'variables' => array(
        'style_name' => NULL,
        'uri' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
        'breakpoints' => array(),
      ),
    ),
    'responsive_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'image_style' => NULL,
        'breakpoints' => array(),
      ),
    ),
    'responsive_image_source' => array(
      'variables' => array(
        'srcset' => NULL,
        'media' => NULL,
        'mime_type' => NULL,
        'sizes' => NULL,
      ),
    ),
  );
}

/**
 * Returns HTML for a responsive image field formatter.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: An ImageItem object.
 *   - image_style: An optional image style.
 *   - path: An optional array containing the link 'path' and link 'options'.
 *   - breakpoints: An array containing breakpoints.
 *
 * @ingroup themeable
 */
function theme_responsive_image_formatter($variables) {
  $item = $variables['item'];
  if (!isset($variables['breakpoints']) || empty($variables['breakpoints'])) {
    $image_formatter = array(
      '#theme' => 'image_formatter',
      '#item' => $item,
      '#image_style' => $variables['image_style'],
      '#path' => $variables['path'],
    );
    return drupal_render($image_formatter);
  }

  $responsive_image = array(
    '#theme' => 'responsive_image',
    '#width' => $item->width,
    '#height' => $item->height,
    '#style_name' => $variables['image_style'],
    '#breakpoints' => $variables['breakpoints'],
  );
  if (isset($item->uri)) {
    $responsive_image['#uri'] = $item->uri;
  }
  elseif ($entity = $item->entity) {
    $responsive_image['#uri'] = $entity->getFileUri();
    $responsive_image['#entity'] = $entity;
  }
  $responsive_image['#alt'] = $item->alt;
  if (drupal_strlen($item->title) != 0) {
    $responsive_image['#title'] = $item->title;
  }
  // @todo Add support for route names.
  if (isset($variables['path']['path'])) {
    $path = $variables['path']['path'];
    $options = isset($variables['path']['options']) ? $variables['path']['options'] : array();
    $options['html'] = TRUE;
    return l($responsive_image, $path, $options);
  }

  return drupal_render($responsive_image);
}

/**
 * Returns HTML for a responsive image.
 *
 * @param $variables
 *   An associative array containing:
 *   - uri: Either the path of the image file (relative to base_path()) or a
 *     full URL.
 *   - width: The width of the image (if known).
 *   - height: The height of the image (if known).
 *   - alt: The alternative text for text-based browsers.
 *   - title: The title text is displayed when the image is hovered in some
 *     popular browsers.
 *   - style_name: The name of the style to be used as a fallback image.
 *   - breakpoints: An array containing breakpoints.
 *
 * @ingroup themeable
 */
function theme_responsive_image($variables) {
  // Make sure that width and height are proper values
  // If they exists we'll output them
  // @see http://www.w3.org/community/respimg/2012/06/18/florians-compromise/
  if (isset($variables['width']) && empty($variables['width'])) {
    unset($variables['width']);
    unset($variables['height']);
  }
  elseif (isset($variables['height']) && empty($variables['height'])) {
    unset($variables['width']);
    unset($variables['height']);
  }

  $sources = array();
  $output = array();
  $image = \Drupal::service('image.factory')->get($variables['uri']);

  // All breakpoints and multipliers.
  foreach ($variables['breakpoints'] as $breakpoint_name => $multipliers) {
    $breakpoint = breakpoint_load($breakpoint_name);
    if ($breakpoint) {
      $sizes = array();
      $srcset = array();
      $derivative_mime_type = FALSE;
      foreach ($multipliers as $multiplier => $mapping_definition) {
        switch ($mapping_definition['mapping_type']) {
          case 'sizes':
            foreach (array_filter($mapping_definition['sizes_image_styles']) as $image_style_name) {
              $image_style = entity_load('image_style', $image_style_name);
              $dimensions = array('width' => $image->getWidth(), 'height' => $image->getHeight());
              $image_style->transformDimensions($dimensions);
              if (!$derivative_mime_type) {
                $derivative_uri = $image_style->buildUri($image->getSource());
                $derivative = \Drupal::service('image.factory')->get($derivative_uri);
                $derivative_mime_type = $derivative->getMimeType();
              }
              $srcset[] = $image_style->buildUrl($image->getSource()) . ' ' . $dimensions['width'] . 'w';
              $sizes = array_merge(explode(',', $mapping_definition['sizes']), $sizes);
            }
            break;
          case 'image_style':
            $image_style = entity_load('image_style', $mapping_definition['image_style']);
            if (!$derivative_mime_type) {
              $derivative_uri = $image_style->buildUri($image->getSource());
              $derivative = \Drupal::service('image.factory')->get($derivative_uri);
              $derivative_mime_type = $derivative->getMimeType();
            }
            $srcset[] = $image_style->buildUrl($image->getSource()) . ' ' . $multiplier;
            break;
        }
      }
      $sources[] = array(
        '#theme' => 'responsive_image_source',
        '#srcset' => implode(', ', array_unique($srcset)),
        '#media' => $breakpoint->mediaQuery,
        '#mime_type' => $derivative_mime_type,
        '#sizes' => implode(',', array_unique($sizes)),
      );
    }
  }

  if (!empty($sources)) {
    $output[] = '<picture>';
    $output = array_merge($output, array_map('drupal_render', $sources));
    // Output the fallback image.
    $fallback_image_style = entity_load('image_style', $variables['style_name']);
    $dimensions = array('width' => $image->getWidth(), 'height' => $image->getHeight());
    $fallback_image_style->transformDimensions($dimensions);

    // Use srcset in the fallback image to avoid unnecessary preloading of
    // images in older browsers.
    $fallback_image = array(
      '#theme' => 'image',
      '#srcset' => array(
        array(
          'uri' => $fallback_image_style->buildUrl($image->getSource()),
          'width' => $dimensions['width'],
        ),
      ),
    );
    foreach (array('alt', 'title', 'attributes') as $key) {
      if (isset($variables[$key])) {
        $fallback_image["#$key"] = $variables[$key];
      }
    }
    $output[] = drupal_render($fallback_image);
    $output[] = '</picture>';
    return implode("\n", $output);
  }
}

/**
 * Returns HTML for a source tag.
 *
 * @param type $variables
 *   An associative array containing:
 *   - media: The media query to use.
 *   - srcset: The srcset containing the the path of the image file or a full
 *     URL and optionally multipliers.
 *   - src: Either the path of the image file (relative to base_path()) or a
 *     full URL.
 *
 * @ingroup themeable
 */
function theme_responsive_image_source($variables) {
  $attributes = array(
    'srcset' => $variables['srcset'],
  );

  if (isset($variables['media']) && !empty($variables['media'])) {
    $attributes['media'] = $variables['media'];
  }

  if (isset($variables['mime_type']) && !empty($variables['mime_type'])) {
    $attributes['type'] = $variables['mime_type'];
  }
  if (isset($variables['sizes']) && !empty($variables['sizes'])) {
    $attributes['sizes'] = $variables['sizes'];
  }
  return '<source' . new Attribute($attributes) . ' />';
}
