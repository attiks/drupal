<?php

/**
 * @file
 * Manage breakpoints and breakpoint groups for responsive designs.
 */

use Symfony\Component\HttpFoundation\Request;

/**
 * Implements hook_help().
 */
function breakpoint_help($route_name, Request $request) {
  switch ($route_name) {
    case 'help.page.breakpoint':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Breakpoint module keeps track of the height, width, and resolution breakpoints where a responsive design needs to change in order to respond to different devices being used to view the site. This module does not have a user interface, but contributed modules such as <a href="!breakpoint_ui">Breakpoint UI</a> may provide one. For more information, see the <a href="!docs">online documentation for the Breakpoint module</a>.', array('!docs' => 'https://drupal.org/documentation/modules/breakpoint', '!breakpoint_ui' => 'https://drupal.org/project/breakpoint_ui')) . '</p>';
      $output .= '<h4>' . t('Terminology') . '</h4>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Breakpoint') . '</dt>';
      $output .= '<dd>' . t('A breakpoint separates the height or width of viewports (screens, printers, and other media output types) into steps. For instance, a width breakpoint of 40em creates two steps: one for widths up to 40em and one for widths above 40em. Breakpoints can be used to define when layouts should shift from one form to another, when images should be resized, and other changes that need to respond to changes in viewport height or width.') . '</dd>';
      $output .= '<dt>' . t('Media query') . '</dt>';
      $output .= '<dd>' . t('<a href="!w3">Media  queries</a> are a formal way to encode breakpoints. For instance, a width breakpoint at 40em would be written as the media query "(min-width: 40em)". Breakpoints are really just media queries with some additional meta-data, such as a name and multiplier information.', array('!w3' => 'http://www.w3.org/TR/css3-mediaqueries/')) . '</dd>';
      $output .= '<dt>' . t('Resolution multiplier') . '</dt>';
      $output .= '<dd>' . t('Resolution multipliers are a measure of the viewport\'s device resolution, defined to be the ratio between the physical pixel size of the active device and the <a href="http://en.wikipedia.org/wiki/Device_independent_pixel">device-independent pixel</a> size. The Breakpoint module defines multipliers of 1, 1.5, and 2; when defining breakpoints, modules and themes can define which multipliers apply to each breakpoint.') . '</dd>';
      $output .= '<dt>' . t('Breakpoint group') . '</dt>';
      $output .= '<dd>' . t('Breakpoints can be organized into groups. Modules and themes should use groups to separate out breakpoints that are meant to be used for different purposes, such as breakpoints for layouts or breakpoints for image sizing.') . '</dd>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Defining breakpoints and breakpoint groups') . '</dt>';
      $output .= '<dd>' . t('Modules and themes can use the API provided by the Breakpoint module to define breakpoints and breakpoint groups, and to assign resolution multipliers to breakpoints.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Load all breakpoint groups as select options.
 *
 * @return array
 *   An array containing breakpoint group labels indexed by their ids.
 */
function breakpoint_group_select_options() {
  $modules = \Drupal::moduleHandler()->getModuleList();
  $options = array();
  foreach ($modules as $module) {
    $group_id = $module->getType() . '.' . $module->getName() . '.breakpointgroup';
    $breakpoint_group = \Drupal::state()->get($group_id);
    if ($breakpoint_group) {
      $options[$group_id] = $breakpoint_group['label'];
    }
  }
  $themes = \Drupal::service('theme_handler')->listInfo();
  foreach ($themes as $theme) {
    $group_id = $theme->getType() . '.' . $theme->getName() . '.breakpointgroup';
    $breakpoint_group = \Drupal::state()->get($group_id);
    if ($breakpoint_group) {
      $options[$group_id] = $breakpoint_group['label'];
    }
  }
  asort($options);
  return $options;
}

/**
 * Load all breakpoints as select options.
 *
 * @return array
 *   An array containing breakpoints indexed by their ids.
 */
function breakpoint_select_options() {
  $modules = \Drupal::moduleHandler()->getModuleList();
  $options = array();
  foreach ($modules as $module) {
    $breakpoint_group = \Drupal::state()->get($module->getType() . '.' . $module->getName() . '.breakpointgroup');
    if ($breakpoint_group) {
      foreach ($breakpoint_group['breakpoints'] as $breakpoint) {
        $options[$breakpoint['id']] = $breakpoint['label'] . ' (' . $module->info['name'] . ' - ' . $module->getType() . ') [' . $breakpoint['mediaQuery'] . ']';
      }
    }
  }
  $themes = \Drupal::service('theme_handler')->listInfo();
  foreach ($themes as $theme) {
    $breakpoint_group = \Drupal::state()->get($theme->getType() . '.' . $theme->getName() . '.breakpointgroup');
    if ($breakpoint_group) {
      foreach ($breakpoint_group['breakpoints'] as $breakpoint) {
        $options[$breakpoint['id']] = $breakpoint['label'] . ' (' . $theme->info['name'] . ' - ' . $theme->getType() . ') [' . $breakpoint['mediaQuery'] . ']';
      }
    }
  }
  asort($options);
  return $options;
}


/**
 * Implements hook_modules_installed().
 */
function breakpoint_modules_installed($installed_modules) {
  $modules = array_intersect_key(system_rebuild_module_data(), array_combine($installed_modules, $installed_modules));
  foreach ($modules as $module) {
    breakpoint_save_extension_breakpoints($module);
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function breakpoint_modules_uninstalled($uninstalled_modules) {
  $modules = array_intersect_key(system_rebuild_module_data(), array_combine($uninstalled_modules, $uninstalled_modules));
  foreach ($modules as $module) {
    breakpoint_delete_extension_breakpoints($module);
  }
}

/**
 * Implements hook_themes_enabled()
 */
function breakpoint_themes_enabled($theme_list) {
  $themes = array_intersect_key(\Drupal::service('theme_handler')->rebuildThemeData(), array_combine($theme_list, $theme_list));
  foreach ($themes as $theme) {
    breakpoint_save_extension_breakpoints($theme);
  }
}

/**
 * Implements hook_themes_enabled()
 */
function breakpoint_themes_disabled($theme_list) {
  $themes = array_intersect_key(\Drupal::service('theme_handler')->rebuildThemeData(), array_combine($theme_list, $theme_list));
  foreach ($themes as $theme) {
    breakpoint_delete_extension_breakpoints($theme);
  }
}

/**
 * Save breakpoints from an extension (module or theme).
 *
 * @param \Drupal\Core\Extension\Extension $extension
 *   The extension (module or theme) to save breakpoints from.
 */
function breakpoint_save_extension_breakpoints(\Drupal\Core\Extension\Extension $extension) {
  if ($extension->status && isset($extension->info['breakpoints'])) {
    $breakpoints = array();
    foreach ($extension->info['breakpoints'] as $breakpoint) {
      $breakpoints[$breakpoint['id']] = $breakpoint;
    }
    \Drupal::state()->set($extension->getType() . '.' . $extension->getName() . '.breakpointgroup', array(
      'label' => $extension->info['name'],
      'id' => $extension->getType() . '.' . $extension->getName() . '.breakpointgroup',
      'breakpoints' => $breakpoints,
    ));
  }
}

/**
 * Delete breakpoints from an extension (module or theme).
 *
 * @param \Drupal\Core\Extension\Extension $extension
 *   The extension (module or theme) to delete breakpoints from.
 */
function breakpoint_delete_extension_breakpoints(\Drupal\Core\Extension\Extension $extension) {
  \Drupal::state()->delete($extension->getType() . '.' . $extension->getName() . '.breakpointgroup');
}

/**
 * Load a breakpoint group.
 *
 * @param string $breakpoint_group_id
 *   The breakpoint group id.
 *
 * @return array
 *   The breakpoint group, or NULL if the breakpoint group doesn't exist.
 */
function breakpoint_load_breakpoint_group($breakpoint_group_id) {
  return \Drupal::state()->get($breakpoint_group_id);
}

function breakpoint_load_breakpoint($breakpoint_id, $reset = FALSE) {
  $breakpoints = &drupal_static(__FUNCTION__, array());
  if (!$breakpoints || $reset) {
    $modules = \Drupal::moduleHandler()->getModuleList();
    foreach ($modules as $module) {
      $group_id = $module->getType() . '.' . $module->getName() . '.breakpointgroup';
      $breakpoint_group = \Drupal::state()->get($group_id);
      if ($breakpoint_group) {
        $breakpoints = array_merge($breakpoints, $breakpoint_group['breakpoints']);
      }
    }
    $themes = \Drupal::service('theme_handler')->listInfo();
    foreach ($themes as $theme) {
      $group_id = $theme->getType() . '.' . $theme->getName() . '.breakpointgroup';
      $breakpoint_group = \Drupal::state()->get($group_id);
      if ($breakpoint_group) {
        $breakpoints = array_merge($breakpoints, $breakpoint_group['breakpoints']);
      }
    }
  }
  return isset($breakpoints[$breakpoint_id]) ? $breakpoints[$breakpoint_id] : NULL;
}

/**
 * Implements hook_rebuild().
 */
function breakpoint_rebuild() {
  breakpoint_remove_breakpoint_groups();
  breakpoint_read_breakpoint_groups();
}

/**
 * Read breakpoint groups from all extensions.
 */
function breakpoint_read_breakpoint_groups() {
  $modules = system_rebuild_module_data();
  foreach ($modules as $module) {
    breakpoint_save_extension_breakpoints($module);
  }
  $themes = \Drupal::service('theme_handler')->rebuildThemeData();
  foreach ($themes as $theme) {
    breakpoint_save_extension_breakpoints($theme);
  }
}

/**
 * Remove all breakpoint groups.
 */
function breakpoint_remove_breakpoint_groups() {
  $modules = system_rebuild_module_data();
  foreach ($modules as $module) {
    breakpoint_delete_extension_breakpoints($module);
  }
  $themes = \Drupal::service('theme_handler')->rebuildThemeData();
  foreach ($themes as $theme) {
    breakpoint_delete_extension_breakpoints($theme);
  }
}
